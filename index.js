// Generated by CoffeeScript 1.7.1
(function() {
  var RemoteConsole, events, extend, request,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  request = require('superagent');

  extend = require('extend');

  events = require('events');

  RemoteConsole = (function() {
    function RemoteConsole(_options) {
      this._options = _options;
      this.sendError = __bind(this.sendError, this);
      this._icons = {
        close: '<i class="fa fa-chevron-down"></i>',
        open: '<i class="fa fa-chevron-up"></i>'
      };
      this._default = {
        server: null,
        method: 'get',
        callback: null,
        toScreen: true,
        data: {
          error: null,
          browser: this.getNavigatorData(),
          window: this.getWindowData()
        }
      };
      this._options = extend({}, this._default, this._options);
      if (this._options.server != null) {
        window.onerror = this.sendError;
      }
      if (typeof this._options.method === "string") {
        this._options.method = this._options.method.toLowerCase();
      }
    }

    RemoteConsole.prototype.sendError = function(e, url, l) {
      this._options.data.error = {
        msg: e,
        file: url,
        line: l
      };
      if ((this._options.method != null) && (this._options.server != null)) {
        this.sendByAjax();
      }
      if (this._options.toScreen === true) {
        this.sendToScreen();
      }
      return true;
    };

    RemoteConsole.prototype.sendByAjax = function() {
      var value, variable, _ref, _req;
      _req = (function() {
        switch (this._options.method) {
          case "post":
            return request.post(this._options.server);
          default:
            return request.get(this._options.server);
        }
      }).call(this);
      if (this._options.headers != null) {
        _ref = this._options.headers;
        for (variable in _ref) {
          value = _ref[variable];
          _req.set(variable, value);
        }
      }
      _req.send(this._options.data);
      return _req.end((function(_this) {
        return function(err, res) {
          if (_this._options.callback != null) {
            _this._options.callback(err, res);
          }
        };
      })(this));
    };

    RemoteConsole.prototype.sendToScreen = function() {
      var body, classPrefix, close, el, pre, rcons, title;
      classPrefix = 'rcons-';
      body = document.getElementsByTagName('body')[0];
      rcons = document.createElement('div');
      title = document.createElement('div');
      close = document.createElement('span');
      pre = document.createElement('pre');
      close.id = 'rcons-close';
      close.className = classPrefix + 'close';
      rcons.id = 'rconsole';
      rcons.className = classPrefix + 'wrap';
      title.className = classPrefix + 'title';
      close.innerHTML = this._icons.close;
      title.innerText = "Remote Console";
      pre.innerText = JSON.stringify(this._options.data, void 0, 2);
      title.appendChild(close);
      rcons.appendChild(title);
      rcons.appendChild(pre);
      body.appendChild(rcons);
      el = document.getElementById('rconsole');
      this.events = events(el, this);
      return this.events.bind('click .rcons-title', 'toggle', el);
    };

    RemoteConsole.prototype.toggle = function() {
      var closeBtn, el, idx, tmp;
      el = [].slice.call(arguments, 1).shift();
      if (el.className != null) {
        closeBtn = document.getElementById('rcons-close');
        if (el.className.indexOf("rcons-hidden") !== -1) {
          tmp = el.className.split(" ");
          idx = tmp.indexOf("rcons-hidden");
          tmp.splice(idx, 1).join(" ");
          closeBtn.innerHTML = this._icons.close;
        } else {
          tmp = el.className.concat(" rcons-hidden");
          closeBtn.innerHTML = this._icons.open;
        }
        el.className = tmp;
      }
    };

    RemoteConsole.prototype.getWindowData = function() {
      if (typeof window !== "undefined" && window !== null) {
        return {
          innerHeight: window.innerHeight,
          innerWidth: window.innerWidth
        };
      }
    };

    RemoteConsole.prototype.getNavigatorData = function() {
      if (typeof navigator !== "undefined" && navigator !== null) {
        return {
          appCodeName: navigator.appCodeName != null ? navigator.appCodeName : void 0,
          appName: navigator.appName != null ? navigator.appName : void 0,
          appVersion: navigator.appVersion != null ? navigator.appVersion : void 0,
          platform: navigator.platform != null ? navigator.platform : void 0,
          userAgent: navigator.userAgent != null ? navigator.userAgent : void 0,
          vendor: navigator.vendor != null ? navigator.vendor : void 0
        };
      }
    };

    return RemoteConsole;

  })();

  module.exports = RemoteConsole;

}).call(this);
