// Generated by CoffeeScript 1.7.1
(function() {
  var RemoteConsole, extend, request,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  request = require('superagent');

  extend = require('extend');

  RemoteConsole = (function() {
    function RemoteConsole(_options) {
      this._options = _options;
      this.sendError = __bind(this.sendError, this);
      this._default = {
        server: null,
        method: 'get',
        callback: null,
        data: {
          error: null,
          browser: this.getNavigatorData(),
          window: this.getWindowData()
        }
      };
      this._options = extend({}, this._default, this._options);
      if (this._options.server != null) {
        window.onerror = this.sendError;
      }
      if (typeof this._options.method === "string") {
        this._options.method = this._options.method.toLowerCase();
      }
    }

    RemoteConsole.prototype.sendError = function(e, url, l) {
      var value, variable, _ref, _req;
      this._options.data.error = {
        msg: e,
        file: url,
        line: l
      };
      _req = (function() {
        switch (this._options.method) {
          case "post":
            return request.post(this._options.server);
          default:
            return request.get(this._options.server);
        }
      }).call(this);
      if (this._options.headers != null) {
        _ref = this._options.headers;
        for (variable in _ref) {
          value = _ref[variable];
          _req.set(variable, value);
        }
      }
      _req.send(this._options.data);
      _req.end((function(_this) {
        return function(err, res) {
          if (_this._options.callback != null) {
            _this._options.callback(err, res);
          }
        };
      })(this));
      return true;
    };

    RemoteConsole.prototype.getWindowData = function() {
      return {
        innerHeight: window.innerHeight,
        innerWidth: window.innerWidth
      };
    };

    RemoteConsole.prototype.getNavigatorData = function() {
      return {
        appCodeName: (typeof navigator !== "undefined" && navigator !== null ? navigator.appCodeName : void 0) != null,
        appName: (typeof navigator !== "undefined" && navigator !== null ? navigator.appName : void 0) != null,
        appVersion: (typeof navigator !== "undefined" && navigator !== null ? navigator.appVersion : void 0) != null,
        platform: (typeof navigator !== "undefined" && navigator !== null ? navigator.platform : void 0) != null,
        userAgent: (typeof navigator !== "undefined" && navigator !== null ? navigator.userAgent : void 0) != null,
        vendor: (typeof navigator !== "undefined" && navigator !== null ? navigator.vendor : void 0) != null
      };
    };

    return RemoteConsole;

  })();

  module.exports = RemoteConsole;

}).call(this);
